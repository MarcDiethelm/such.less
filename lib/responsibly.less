/*
 * base variables
 * adjust these for your setup
 * predefined in 00-variables.less
 */
@grid-fixed-width: @max-content-width;
@grid-fixed-gutter: @gutter-width;
@grid-max-cols: @grid-cols;
// grid type either fluid or fixed
@grid-type: 'fluid';
// to what floating point number should be rounded?
@decimal-places: 3;

// GRID CALCULATIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * duplicate mixin switches according to passed type
 * any other value than 'fixed' is assumed as fluid
 */
.grid-create(@type, @fixed-width, @fixed-gutter, @cols) {
	// fluid grid (default)
	@width: 100%;

	// fluid gutter is calculated relatively to the static gutter in fixed grid width
	@row-gutter: round(percentage(@fixed-gutter / @fixed-width), @decimal-places);
	// percentage column gutter has to be slightly bigger than row indent because row indent changes the container width
	@true-gutter: round(percentage(@fixed-gutter / (@fixed-width + @fixed-gutter)), @decimal-places);
	
	// calculate the width of one grid column
	@one-col: (@width - @true-gutter * @cols) / @cols;

	// implement grid mixins with type dependent variables
	#grid > .grid-mixins(@width, @row-gutter, @true-gutter, @one-col);
}

.grid-create('fixed', @fixed-width, @fixed-gutter, @cols) {
	// fixed grid
	@width: @fixed-width;
	@gutter: @fixed-gutter;
	
	// calculate the width of one grid column
	// add one gutter to grid width because of negative indent
	@one-col: ((@width + @gutter) - @gutter * @cols) / @cols;

	// implement grid mixins with type dependent variables
	// gutter passed twice because in fluid (percentage) grid column gutter is slightly bigger than row indent
	#grid > .grid-mixins(@width, @gutter, @gutter, @one-col);
}

#grid {
	/*
	 * pass grid variables from global scope (defined on top)
	 * to our switch mixin which manipulates/creates variables
	 * this mixin is also our unlocker to use #grid > .mixins() as usual
	 */
	.grid-create(@grid-type, @grid-fixed-width, @grid-fixed-gutter, @grid-max-cols);

	// grid mixins which get called with manipulated variables from unlocker
	.grid-mixins(@width, @row-gutter, @gutter, @one-col) {
		.span-width(@num) when (@num > 0) {
			width: round((@one-col * @num) + (@gutter * (@num - 1)), @decimal-places);
		}
		
		// indent grid columns either way with these mixins
		.indent(@num: 0) when (@num >= 0) {
			margin-left: round((@one-col * @num) + (@gutter * (@num + 1)), @decimal-places);
		}

		// negative indent can only be used in a fixed grid system and sadly not be generated with the loop
		// still, you can use this mixin if the need occurs
		.indent(@num: -1) when (@num < 0) {
			margin-left: round((@one-col * @num) + (@gutter * (@num - 1)), @decimal-places);
		}

		// used only on .row for proper negative indent
		.row-indent(@num: 0) {
			margin-left: -(round((@one-col * @num) + (@row-gutter * (@num + 1)), @decimal-places));
		}

		// visually manipulate grid column order with these mixins
		.push(@num) when (@num >= 0) {
			position: relative;
			left: round((@one-col * @num) + (@gutter * @num), @decimal-places);
		}

		.pull(@num) when (@num >= 0) {
			position: relative;
			right: round((@one-col * @num) + (@gutter * @num), @decimal-places);
		}
	}

	// less loop
	.loop (@index, @class: item, @mixin: '') when (@index > 0) {
		// create the actual css selector
		.@{class}-@{index} {
			#loop-mixin > .apply(@mixin, @index);
		}

		// next iteration
		.loop(@index - 1, @class, @mixin);
	}

	// end the loop when index is 0
	.loop (@index) when (@index = 0) {
	}
}

// GRID CLASS GENERATOR
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * mixins to call inside less loop
 * use standardized global mixins - because we have them...
 */
#loop-mixin {
	// base grid loops
	.apply('grid-span', @index) {
		.col-span(@index);
	}

	.apply('grid-offset', @index) {
		.offset(@index);
	}

	.apply('grid-push', @index) {
		.push(@index);
	}

	.apply('grid-pull', @index) {
		.pull(@index);
	}
	// grid loops end
}

// GLOBAL MIXINS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * make simpler global mixins available
 * (mainly for class/mixin name consistency)
 * values will depend on grid type
 * (either percentage or pixel)
 */
.col-span(@num: 0) when (@num >= 0) {
	#grid > .span-width(@num);
}

.offset(@num: 0) {
	// must use important statement to overwrite default row margin
	#grid > .indent(@num) !important;
}

.push(@num: 0) when (@num >= 0) {
	#grid > .push(@num);
}

.pull(@num: 0) when (@num >= 0) {
	#grid > .pull(@num);
}

// LAYOUT SETUP HELPERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * You can use the following mixins to easily set up responsive layouts.
 * For grid layouts with non-equal span sizes use incrementing col-[integer] classes and apply sizes to each of these classes.
 *
 * .col-set([colum name], [column span width]):
 * Standard mixin to set up a column in a responsive layout
 *
 * To set up layouts with equal width columns you only specify the width in `.col-set-equal`.
 *
 * .col-set-equal([column span width]):
 * Extended mixin to set up equal width columns and properly clear them at the same time
 *
 * Note: Every use of .col-set-equal() must be wrapped in a media query (even for smallest "mobile first" viewport).
 *       Because else the `nth-child` selectors used in ` .col-set-equal()` for proper clearing would be passed on to all
 *       other viewports/media queries in the layout.
 *
 * .col-clear([colums per line]):
 * Use this to manually clear every nth column if columns differ in height.
 * This ensures that a grid layout can have only [colums per line] columns on one horizontal grid line.
 *
 **/

.col-clear(@columns) when (isnumber(@columns)) {
	> .col:nth-child(@{columns}n+1) {
		clear: left;
	}
}

.col-set(@col-name; @col-span) when (isnumber(@col-span)) {
	// apply styles to child columns directly or to columns within child rows
	> .row > .@{col-name},
	> .@{col-name} {
		.col-span(@col-span);
	}
}

.col-set-equal(@col-span) when (isnumber(@col-span)) {
	@clear: @grid-max-cols / @col-span;
	
	// use default col-set mixin to generate selector
	.col-set(col; @col-span);
	
	// with equal columns, clear every nth element for proper alignment
	.col-clear(@clear);
}

// BASE STYLES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// prefixed clearfix mixin from h5bp for grid only
.grid-cf() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}
}

/*--- base grid layout styles ---*/
.row,
.col {
	display: block;
	margin-right: 0 !important;
	padding-left: 0;
	padding-right: 0;
}

.row {
	.grid-cf();
	// one gutter negative indent for row
	#grid > .row-indent(0) !important;

	// used to .push and .pull columns
	&.ordered {
		position: relative;
	}
}

.col {
	// one gutter indent for each column
	#grid > .indent(0) !important;
	float: left;

	/*
	 * spacer class for the rare occasion we have an "empty" column in a responsive grid layout
	 * where the use of .offset is not possible because of realignment of columns
	 */
	&.spacer {
		min-height: 1px;
		visibility: hidden;
	}
}

/*--- generate grid classes ---*/
/**
 * Parameters:
 * 1) amount of iterations
 * 2) class selector prefix to generate
 * 3) mixin to apply to each selector
 *
 * Example:
 * #grid > .loop(12, class-prefix, 'mixin');
 *
 * NOTE: you can not use the generated classes themselves as mixins!
 */

.row {
	#grid > .loop(@grid-max-cols, col-span, 'grid-span');
	#grid > .loop(@grid-max-cols - 1, offset, 'grid-offset');
	#grid > .loop(@grid-max-cols - 1, push, 'grid-push');
	#grid > .loop(@grid-max-cols - 1, pull, 'grid-pull');
}