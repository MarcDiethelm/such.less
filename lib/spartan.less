/**
 * "Spartan" LessCSS Grid System
 * version: 4.0.0
 * https://github.com/SimonHarte/SpartanGrid/blob/develop/spartan.less
 * License: MIT
 * Copyright 2014 Simon Harte
 */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GRID CALCULATIONS

// Note: We use !important statements for grid layout critical styles.
//       Like this you can define for example margin and padding shorthands without affecting the grid.

.spartan-grid(@grid-type, @fixed-width, @gutter-with, @max-cols) {
	// multiple mixins switch according to passed types

	// mixin for fluid grid
	.spartan-create(fluid, @fixed-width, @gutter-with, @cols) {
		// implement grid mixins with type dependent variable
		.spartan-grid-mixins(
			(100% / @cols) // single column width
		);
	}

	// mixin for fixed grid
	.spartan-create(fixed, @fixed-width, @gutter-with, @cols) {
		// implement grid mixins with type dependent variable
		.spartan-grid-mixins(
			((@fixed-width + @gutter-with) / @cols) // single column width
		);
	}

	// call switch mixin to calculate variables depending on grid configuration
	.spartan-create(~'@{grid-type}', @fixed-width, @gutter-with, @max-cols);

	// unlock grid mixins with modified variable
	.spartan-grid-mixins(@one-col) {
		.spartan-span-width(@num) {
			width: ceil((@one-col * @num) * pow(10, @spartan-grid-precision)) / pow(10, @spartan-grid-precision);
		}

		// indent grid columns either way with this mixin
		.spartan-indent(@num: 0) {
			margin-left: round((@one-col * @num), @spartan-grid-precision);
		}

		// visually manipulate grid column order with these mixins
		.spartan-push(@num) {
			left: round((@one-col * @num), @spartan-grid-precision);
		}

		.spartan-pull(@num) {
			right: round((@one-col * @num), @spartan-grid-precision);
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GLOBAL STYLE MIXINS

// provide standardized, prefixed mixins
// values will depend on grid type
// (either percentage or pixel)

.grid-span(@num: 0) when (@num >= 0) {
	.spartan-span-width(@num);
}

.grid-offset(@num: 0) {
	// use important statement to overwrite possible shorthands
	.spartan-indent(@num) !important;
}

.grid-push(@num: 0) when (@num >= 0) {
	.spartan-push(@num);
}

.grid-pull(@num: 0) when (@num >= 0) {
	.spartan-pull(@num);
}

// convenience mixin for push and pull
// also for 4th param to .grid-col-set()
.grid-reorder(@num) when (@num >= 0) {
	.grid-push(@num);
}

.grid-reorder(@num) when (@num < 0) {
	.grid-pull(abs(@num));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LAYOUT SETUP HELPERS

// You can use the following mixins to easily set up responsive layouts.
// For grid layouts with non-equal span sizes use incrementing col-[integer] classes and apply sizes to each of these classes.
//
// .col-set([colum name], [column span width], [offset], [order]):
// Standard mixin to set up a column in a responsive layout.
// You can optionally pass an offset and reorder parameter to apply indentation or use push and pull on a column.
//
// To set up layouts with equal width columns you only specify the width in `.col-set-equal`.
//
// .col-set-equal([column span width]):
// Extended mixin to set up equal width columns and properly clear them at the same time
//
// Note: Every use of .col-set-equal() must be wrapped in a media query (even for smallest "mobile first" viewport).
//       Because else the `nth-child` selectors used in ` .col-set-equal()` for proper clearing would be passed on to all
//       other viewports/media queries in the layout.
//
// .col-clear([colums per line]):
// Use this to manually clear every nth column if columns differ in height.
// This ensures that a grid layout can have only [colums per line] columns on one horizontal grid line.

// clear every new grid line, see issue in "before" state here: http://stackoverflow.com/questions/3628311/css-floating-divs-with-different-height-are-aligned-with-space-between-them
.grid-col-clear(@columns) when (@columns >= 0) {
	@column-integer: floor(@columns);

	> .@{spartan-namespace}col:nth-child(@{column-integer}n+1) {
		clear: left;
	}
}

// simple custom column name with width
.grid-col-set(@col-name, @col-span) when (@col-span >= 0) {
	@column-fullname: ~'.@{spartan-namespace}@{col-name}';

	> @{column-fullname} {
		.grid-span(@col-span);
	}
}

// custom column with width and offset
.grid-col-set(@col-name, @col-span, @offset) when (@col-span >= 0) {
	@column-fullname: ~'.@{spartan-namespace}@{col-name}';

	> @{column-fullname} {
		.grid-span(@col-span);
		.grid-offset(@offset);
	}
}

// custom column with width and reordering, apply only reorder if offset is 0
.grid-col-set(@col-name, @col-span, @offset, @reorder) when (@col-span >= 0) and (@offset = 0) {
	@column-fullname: ~'.@{spartan-namespace}@{col-name}';

	> @{column-fullname} {
		.grid-span(@col-span);
		.grid-reorder(@reorder);
	}
}

// custom column with width and offset, apply only offset if reorder is 0
.grid-col-set(@col-name, @col-span, @offset, @reorder) when (@col-span >= 0) and (abs(@reorder) = 0) {
	@column-fullname: ~'.@{spartan-namespace}@{col-name}';

	> @{column-fullname} {
		.grid-span(@col-span);
		.grid-offset(@offset);
	}
}

// custom column with width, offset and reordering, apply both if offset is not 0
.grid-col-set(@col-name, @col-span, @offset, @reorder) when (@col-span >= 0) and (abs(@offset) > 0) {
	@column-fullname: ~'.@{spartan-namespace}@{col-name}';

	> @{column-fullname} {
		.grid-span(@col-span);
		.grid-offset(@offset);
		.grid-reorder(@reorder);
	}
}

// predefined col class with width and proper clearing
.grid-col-set-equal(@col-span) when (@col-span >= 0) {
	@spartan-clear: @spartan-grid-max-cols / @col-span;

	// use default col-set mixin to generate selector
	.grid-col-set(col, @col-span);

	// with equal columns, clear every nth element for proper alignment
	.grid-col-clear(@spartan-clear);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CORE STYLES

// core variables and mixins
.spartan-core(@ns) {
	// Float precision used for rounding is the most important variable because we get different behaviours over browsers
	// and certain grid container widths. Note that rounding issues only exist for width and padding style properties.
	//
	// There are two factors to consider when adjusting the precision:
	// - precision value itself
	// - using round(), floor() or ceil() to calculate width and padding (column gutter)
	//
	// Tests have shown these behaviours:
	//
	// - Using precision < 3:
	//     - We get inaccurate values with round(), floor(), and ceil()
	// - Using precision = 3:
	//     - We get inaccurate values in Safari when using floor(),
	//     - We get inaccurate values with round() and ceil() which leads to jumping columns,
	//       with round() starting in containers larger than ~800px (FF)
	// - Using precision = 4:
	//     - We get inaccurate values in Safari when using round() and floor()
	//     - We get an overall good behaviour when using ceil(),
	//       columns will start jumping in containers larger than ~2200px (FF)
	// - Using precision > 4:
	//     - We get inaccurate values in Safari with round() and floor()
	//     - We get an overall good behaviour when using ceil()
	//
	// Recommendation:
	// Using a float precision of 5 together with ceil() seems to be the smallest possible,
	// most accurate amount for a future-proof grid system.
	@spartan-grid-precision: 5;

	.set-namespace(@ns) when not (@ns = '') {
		@spartan-namespace: ~'@{ns}-';
	}
	.set-namespace(@ns) when (default()) {
		@spartan-namespace: ~'@{ns}';
	}

	.set-namespace(@ns);

	// prefixed clearfix mixin from h5bp for grid only
	.spartan-cf() {
		&:before,
		&:after {
			content: " ";
			display: table;
		}

		&:after {
			clear: both;
		}
	}

	// prefixed box sizing mixin
	.spartan-box-sizing(@boxmodel: border-box) {
		-webkit-box-sizing: @boxmodel;
		-moz-box-sizing: @boxmodel;
		box-sizing: @boxmodel;
	}

	.spartan-base-style('both') {
		display: block;
		// make sure no shorthand properties interfere with grid styles
		margin-right: 0 !important;
		padding-right: 0 !important;
	}

	.spartan-base-style('row') {
		.spartan-cf();
		padding-left: 0 !important;
	}

	.spartan-base-style('col') {
		// make sure we have the correct box sizing for gutter padding
		.spartan-box-sizing();
		float: left;
		margin-left: 0 !important;
		// columns should per default span the whole width if none is set
		width: 100%;
	}
}

// base grid layout styles, valid for every grid setup
.spartan-core-selectors() {
	.@{spartan-namespace}row,
	.@{spartan-namespace}col {
		.spartan-base-style('both');
	}

	.@{spartan-namespace}row {
		.spartan-base-style('row');

		// used to .push and .pull columns
		&.@{spartan-namespace}reorder {
			.grid-row-reorder();
		}
	}

	.@{spartan-namespace}col {
		.spartan-base-style('col');
	}
}

// don't generate any css but just unlock core variables and mixins
.grid-core(@ns: g, @generate: true) when (@generate = false) {
	.spartan-core(@ns);
}

.grid-core(@ns: g, @generat: true) when (@ns = false) {
	.spartan-core('g');
}

.grid-core(@ns: g, @generate: true) when (@ns = true) {
	.spartan-core('g');
	.spartan-core-selectors();
}

// also generate core selectors
.grid-core(@ns: g, @generate: true) when (default()) {
	.spartan-core(@ns);
	.spartan-core-selectors();
}

// all necessary row styles with gutter
.grid-row(@gutter: @spartan-grid-gutter) {
	.spartan-base-style('both');
	.spartan-base-style('row');
	.spartan-row-gutter(@gutter) !important;
}

.grid-row-reorder() {
	> .@{spartan-namespace}col {
		position: relative;
	}
}

// all necessary column styles with gutter
.grid-col(@gutter: @spartan-grid-gutter) {
	.spartan-base-style('both');
	.spartan-base-style('col');
	.spartan-col-gutter(@gutter) !important;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UNLOCK GRID CONFIGURATION

.grid-unlock(@config...) {
	// make variables accessible for different tests
	@spartan-grid-fixed-width: extract(@config, 1);
	@spartan-grid-gutter: extract(@config, 3);
	@spartan-grid-max-cols: extract(@config, 5);
	@spartan-grid-type: extract(@config, 2);
	@spartan-grid-gutter-type: extract(@config, 4);

	// set up grid mixins depending on an included config
	.spartan-grid(
		@spartan-grid-type,
		@spartan-grid-fixed-width,
		@spartan-grid-gutter,
		@spartan-grid-max-cols
	);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GRID GUTTER

// lib mixins
.spartan-row-gutter(@gutter) {
	margin-left: round(-@gutter, @spartan-grid-precision);
}

// assuming px, em
.spartan-col-gutter(@gutter) when (default()) {
	padding-left: ceil(@gutter * pow(10, @spartan-grid-precision)) / pow(10, @spartan-grid-precision);
}

// assuming %
.spartan-col-gutter(@gutter, true) when (ispercentage(@gutter)) {
	// column gutter has to be slightly smaller with percentage value because container is bigger
	padding-left: ceil(percentage(@gutter / (100% + @gutter)) * pow(10, @spartan-grid-precision)) / pow(10, @spartan-grid-precision);
}

.spartan-gutter-styles(@row-gutter, @col-gutter) {
	&.@{spartan-namespace}row {
		.spartan-row-gutter(@row-gutter) !important;
	}

	.@{spartan-namespace}col {
		.spartan-col-gutter(@col-gutter) !important;
	}
}

// global mixins

// passing no argument
.grid-gutter() when (default()) {
	// assume fluid grid
	.grid-gutter(@spartan-grid-fixed-width, @spartan-grid-gutter);
}
.grid-gutter() when (@spartan-grid-type = 'fixed'), (@spartan-grid-gutter-type = 'fixed') {
	// use original value
	.grid-gutter(@spartan-grid-gutter);
}

// passing one argument
.grid-gutter(@gutter-width) when (default()) {
	.spartan-gutter-styles(
		@gutter-width, // row gutter
		@gutter-width // column gutter
	);
}
.grid-gutter(@gutter-width) when (ispercentage(@gutter-width)) {
	// when gutter is passed as percentage we have to set a slightly smaller gutter for columns
	// because the row container gets larger through negative gutter indent
	.spartan-gutter-styles(
		@gutter-width, // row gutter
		percentage(@gutter-width / (100% + @gutter-width)) // column gutter
	);
}

// passing two arguments
.grid-gutter(@grid-width, @gutter-width) when (default()) {
	// if any other than tested units is passed, use the value as pixel
	.grid-gutter(@grid-width, unit(@gutter-width, px));
}
.grid-gutter(@grid-width, @gutter-width) when (ispixel(@gutter-width)) {
	.spartan-gutter-styles(
		percentage(@gutter-width / @grid-width), // row gutter
		percentage(@gutter-width / (@grid-width + @gutter-width)) // column gutter
	);
}
.grid-gutter(@grid-width, @gutter-width) when (isem(@gutter-width)) {
	.spartan-gutter-styles(
		percentage((@gutter-width*16) / @grid-width), // row gutter
		percentage((@gutter-width*16) / (@grid-width + (@gutter-width*16))) // column gutter
	);
}
.grid-gutter(@grid-width, @gutter-width) when (ispercentage(@gutter-width)) {
	.grid-gutter(@gutter-width);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GENERATE BASE CLASSES

.grid-generate(@prefix: '', @columns: @spartan-grid-max-cols) {

	.set-prefix(@prefix) when not (@prefix = '') {
		@spartan-prefix: ~'@{prefix}-';
	}
	.set-prefix(@prefix) when (default()) {
		@spartan-prefix: ~'@{prefix}';
	}

	.set-prefix(@prefix);

	// less loop to generate grid classes
	.spartan-loop (@index, @class: item, @mixin: '') when (@index > 0) {
		// create the actual css selector
		.@{class}-@{index} {
			// interpolate mixin variable so quotes have no impact
			.spartan-apply(~'@{mixin}', @index);
		}

		// next iteration
		.spartan-loop(@index - 1, @class, @mixin);
	}

	// mixins to call inside less loop
	// use standardized global mixins for correct !important statements where needed

	.spartan-apply(grid-span, @index) {
		.grid-span(@index);
	}

	.spartan-apply(grid-offset, @index) {
		.grid-offset(@index);
	}

	.spartan-apply(grid-push, @index) {
		.grid-push(@index);
	}

	.spartan-apply(grid-pull, @index) {
		.grid-pull(@index);
	}

	// generate grid classes
	// Parameters:
	// 1) amount of iterations
	// 2) class selector prefix to generate
	// 3) mixin to apply to each selector
	//
	// Example:
	// .grid > .loop(12, class-prefix, 'mixin');
	//
	// NOTE: you can not use the generated classes themselves as mixins!

	@spartan-selector: ~'@{spartan-namespace}@{spartan-prefix}';

	.spartan-loop(@columns, ~'@{spartan-selector}span', 'grid-span');
	.spartan-loop(@columns, ~'@{spartan-selector}offset', 'grid-offset');
	.spartan-loop(@columns, ~'@{spartan-selector}push', 'grid-push');
	.spartan-loop(@columns, ~'@{spartan-selector}pull', 'grid-pull');
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DO EVERYTHING AT ONCE

.grid-bundle(@ns: g, @config...) {
	.grid-core(@ns);
	.grid-unlock(@config);
	.grid-gutter();
	.grid-generate();
}
