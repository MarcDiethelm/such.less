/**
 * "Spartan" LessCSS Grid System
 * version: 3.4.0
 * https://github.com/SimonHarte/SpartanGrid/blob/develop/spartan.less
 * License: MIT
 * Copyright 2014 Simon Harte
 */

// GRID CALCULATIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Note: We use !important statements for grid layout critical styles.
//       Like this you can define for example margin and padding shorthands without affecting the grid.

.spartan-grid() {
	// multiple mixins switch according to passed types
	// mixin for standard fluid grid with fluid gutter
	.spartan-create('fluid', 'fluid', @fixed-width, @fixed-gutter, @cols) {
		@spartan-width: 100%;

		// take negative row indent into account
		@spartan-row-gutter: percentage(@fixed-gutter / @fixed-width);

		// take negative row indent into account
		@spartan-col-gutter: percentage(@fixed-gutter / (@fixed-width + @fixed-gutter));

		// calculate the width of one grid column
		@spartan-one-col: (@spartan-width / @cols);

		// implement grid mixins with type dependent variables
		.spartan-grid-mixins(@spartan-row-gutter, @spartan-col-gutter, @spartan-one-col);
	}

	// mixin for fluid grid and fixed gutter
	.spartan-create('fluid', 'fixed', @fixed-width, @fixed-gutter, @cols) {
		@spartan-width: 100%;

		// calculate the width of one grid column
		@spartan-one-col: (@spartan-width / @cols);

		// implement grid mixins with type dependent variables
		.spartan-grid-mixins(@fixed-gutter, @fixed-gutter, @spartan-one-col);
	}

	// only one mixin for fixed grid needed because we cannot make fluid gutters in static grid
	.spartan-create('fixed', @gutter-type, @fixed-width, @fixed-gutter, @cols) {
		// calculate the width of one grid column
		@spartan-one-col: ((@fixed-width + @fixed-gutter) / @cols);

		// implement grid mixins with type dependent variables
		.spartan-grid-mixins(@fixed-gutter, @fixed-gutter, @spartan-one-col);
	}

	// call switch mixin to calculate variables depending on grid configuration
	.spartan-create(@spartan-grid-type, @spartan-grid-gutter-type, @spartan-grid-fixed-width, @spartan-grid-fixed-gutter, @spartan-grid-max-cols);

	// unlock grid mixins with modified variables
	.spartan-grid-mixins(@row-gutter, @col-gutter, @one-col) {
		.spartan-span-width(@num) {
			width: ceil((@one-col * @num) * pow(10, @spartan-precision)) / pow(10, @spartan-precision);
		}

		// indent grid columns either way with these mixins
		.spartan-indent(@num: 0) {
			margin-left: round((@one-col * @num), @spartan-precision);
		}

		// used only on .g-col for uniquely applied gutter
		.spartan-gutter(@num: 0) when (@num >= 0) {
			padding-left: ceil(@col-gutter * pow(10, @spartan-precision)) / pow(10, @spartan-precision);
		}

		// used only on .g-row for proper negative indents
		.spartan-gutter(@num: 0) when (@num < 0) {
			margin-left: round(-@row-gutter, @spartan-precision);
		}

		// visually manipulate grid column order with these mixins
		.spartan-push(@num) {
			left: round((@one-col * @num), @spartan-precision);
		}

		.spartan-pull(@num) {
			right: round((@one-col * @num), @spartan-precision);
		}
	}

	// less loop to generate grid classes
	.spartan-loop (@index, @class: item, @mixin: '') when (@index > 0) {
		// create the actual css selector
		.@{class}-@{index} {
			.spartan-apply(@mixin, @index);
		}

		// next iteration
		.spartan-loop(@index - 1, @class, @mixin);
	}

	// GRID CLASS GENERATOR
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// mixins to call inside less loop
	// use standardized global mixins - because we have them...

	.spartan-apply('grid-span', @index) {
		.grid-span(@index);
	}

	.spartan-apply('grid-offset', @index) {
		.grid-offset(@index);
	}

	.spartan-apply('grid-push', @index) {
		.grid-push(@index);
	}

	.spartan-apply('grid-pull', @index) {
		.grid-pull(@index);
	}
}

// GLOBAL MIXINS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// provide standardized, prefixed mixins
// values will depend on grid type
// (either percentage or pixel)

.grid-span(@num: 0) when (@num >= 0) {
	.spartan-span-width(@num);
}

.grid-offset(@num: 0) {
	// use important statement to overwrite default row margin applied with shorthands
	.spartan-indent(@num) !important;
}

.grid-push(@num: 0) when (@num >= 0) {
	.spartan-push(@num);
}

.grid-pull(@num: 0) when (@num >= 0) {
	.spartan-pull(@num);
}

// convenience mixin for push and pull
// also for 4th param to .grid-col-set()
.grid-reorder(@num) when (@num >= 0) {
	.grid-push(@num);
}

.grid-reorder(@num) when (@num < 0) {
	.grid-pull(abs(@num));
}

// LAYOUT SETUP HELPERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// You can use the following mixins to easily set up responsive layouts.
// For grid layouts with non-equal span sizes use incrementing col-[integer] classes and apply sizes to each of these classes.
//
// .col-set([colum name], [column span width], [offset], [order]):
// Standard mixin to set up a column in a responsive layout.
// You can optionally pass an offset and reorder parameter to apply indentation or use push and pull on a column.
//
// To set up layouts with equal width columns you only specify the width in `.col-set-equal`.
//
// .col-set-equal([column span width]):
// Extended mixin to set up equal width columns and properly clear them at the same time
//
// Note: Every use of .col-set-equal() must be wrapped in a media query (even for smallest "mobile first" viewport).
//       Because else the `nth-child` selectors used in ` .col-set-equal()` for proper clearing would be passed on to all
//       other viewports/media queries in the layout.
//
// .col-clear([colums per line]):
// Use this to manually clear every nth column if columns differ in height.
// This ensures that a grid layout can have only [colums per line] columns on one horizontal grid line.

.grid-col-clear(@columns) when (@columns >= 0) {
	> .@{spartan-namespace}col:nth-child(@{columns}n+1) {
		clear: left;
	}
}

.grid-col-set(@col-name, @col-span) when (@col-span >= 0) {
	@column-fullname: ~'.@{spartan-namespace}@{col-name}';

	> @{column-fullname} {
		.grid-span(@col-span);
	}
}

.grid-col-set(@col-name, @col-span, @offset) when (@col-span >= 0) {
	@column-fullname: ~'.@{spartan-namespace}@{col-name}';

	> @{column-fullname} {
		.grid-span(@col-span);
		.grid-offset(@offset);
	}
}

// only apply reordering when offset is zero
.grid-col-set(@col-name, @col-span, @offset, @reorder) when (@col-span >= 0) and (@offset = 0) {
	@column-fullname: ~'.@{spartan-namespace}@{col-name}';

	> @{column-fullname} {
		.grid-span(@col-span);
		.grid-reorder(@reorder);
	}
}

// apply offset and reorder if offset is not zero
.grid-col-set(@col-name, @col-span, @offset, @reorder) when (@col-span >= 0) and (abs(@offset) > 0) {
	@column-fullname: ~'.@{spartan-namespace}@{col-name}';

	> @{column-fullname} {
		.grid-span(@col-span);
		.grid-offset(@offset);
		.grid-reorder(@reorder);
	}
}

.grid-col-set-equal(@col-span) when (@col-span >= 0) {
	@spartan-clear: @spartan-grid-max-cols / @col-span;

	// use default col-set mixin to generate selector
	.grid-col-set(col, @col-span);

	// with equal columns, clear every nth element for proper alignment
	.grid-col-clear(@spartan-clear);
}

// GRID CREATION API
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// generate base grid classes valid for every setup
.grid-core(@ns: g) {
	.set-namespace(@ns) when not (@ns = '') {
		@spartan-namespace: ~'@{ns}-';
	}
	.set-namespace(@ns) when (default()) {
		@spartan-namespace: ~'@{ns}';
	}

	.set-namespace(@ns);

	// prefixed clearfix mixin from h5bp for grid only
	.grid-cf() {
		&:before,
		&:after {
			content: " ";
			display: table;
		}

		&:after {
			clear: both;
		}
	}

	// prefixed twitter bootstrap box sizing mixin
	.grid-box-sizing(@boxmodel: border-box) {
		-webkit-box-sizing: @boxmodel;
		-moz-box-sizing: @boxmodel;
		box-sizing: @boxmodel;
	}

	.grid-row-reorder() {
		> .@{spartan-namespace}col {
			position: relative;
		}
	}

	// base grid layout styles, valid for every grid setup
	.@{spartan-namespace}row,
	.@{spartan-namespace}col {
		display: block;
		margin-right: 0 !important;
		padding-right: 0 !important;
	}

	.@{spartan-namespace}row {
		.grid-cf();
		padding-left: 0 !important;

		// used to .push and .pull columns
		&.@{spartan-namespace}reorder {
			.grid-row-reorder();
		}
	}

	.@{spartan-namespace}col {
		// make sure we have the correct box sizing for fixed gutter grid
		.grid-box-sizing();
		float: left;
		margin-left: 0 !important;
	}
}

.grid-gutter() {
	// base row and gutter styles must be set anew
	.@{spartan-namespace}row {
		.spartan-gutter(-1) !important;
	}

	.@{spartan-namespace}col {
		// one gutter indent for each column
		.spartan-gutter(1) !important;
		// columns should per default span the whole width if none is set
		.grid-span(@spartan-grid-max-cols);
	}
}

.grid-unlock(@config...) {
	@spartan-grid-fixed-width: extract(@config, 1);
	@spartan-grid-fixed-gutter: extract(@config, 3);
	@spartan-grid-max-cols: extract(@config, 5);
	@spartan-grid-type: extract(@config, 2);
	@spartan-grid-gutter-type: extract(@config, 4);

	// Float precision used for rounding is the most important variable because we get different behaviours over browsers
	// and certain grid container widths. Note that rounding issues only exist for width and padding style properties.
	//
	// There are two factors to consider when adjusting the precision:
	// - precision value itself
	// - using round(), floor() or ceil() to calculate width and padding (column gutter)
	//
	// Tests have shown these behaviours:
	//
	// - Using precision < 3:
	//     - We get inaccurate values with round(), floor(), and ceil()
	// - Using precision = 3:
	//     - We get inaccurate values in Safari when using floor(),
	//     - We get inaccurate values with round() and ceil() which leads to jumping columns,
	//       with round() starting in containers larger than ~800px (FF)
	// - Using precision = 4:
	//     - We get inaccurate values in Safari when using round() and floor()
	//     - We get an overall good behaviour when using ceil(),
	//       columns will start jumping in containers larger than ~2200px (FF)
	// - Using precision > 4:
	//     - We get inaccurate values in Safari with round() and floor()
	//     - We get an overall good behaviour when using ceil()
	//
	// Recommendation:
	// Using a float precision of 5 together with ceil() seems to be the smallest possible,
	// most accurate amount for a future-proof grid system.

	@spartan-precision: 5;

	// set up grid styles depending on an included config
	.spartan-grid();
}

.grid-generate(@prefix: '') {
	.set-prefix(@prefix) when not (@prefix = '') {
		@spartan-prefix: ~'@{prefix}-';
	}
	.set-prefix(@prefix) when (default()) {
		@spartan-prefix: ~'@{prefix}';
	}

	.set-prefix(@prefix);

	// generate grid classes
	// Parameters:
	// 1) amount of iterations
	// 2) class selector prefix to generate
	// 3) mixin to apply to each selector
	//
	// Example:
	// .grid > .loop(12, class-prefix, 'mixin');
	//
	// NOTE: you can not use the generated classes themselves as mixins!

	@spartan-classname: ~'@{spartan-namespace}@{spartan-prefix}';

	.spartan-grid > .spartan-loop(@spartan-grid-max-cols - 1, ~'@{spartan-classname}span', 'grid-span');
	.spartan-grid > .spartan-loop(@spartan-grid-max-cols - 1, ~'@{spartan-classname}offset', 'grid-offset');
	.spartan-grid > .spartan-loop(@spartan-grid-max-cols - 1, ~'@{spartan-classname}push', 'grid-push');
	.spartan-grid > .spartan-loop(@spartan-grid-max-cols - 1, ~'@{spartan-classname}pull', 'grid-pull');
}

.grid-bundle(@ns: g, @config...) {
	.grid-core(@ns);
	.grid-unlock(@config);
	.grid-gutter();
	.grid-generate();
}
