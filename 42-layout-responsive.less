/**
 * You can use the following mixins to easily set up responsive layouts.
 * For grid layouts with non-equal span sizes use incrementing col-[integer] classes and apply sizes to each of these classes:
 *
 * .col-set([column name], [column span width]):
 * Standard mixin to set up a column in a responsive layout
 *
 * To set up layouts with equal width columns you only specify the width in `.col-set-equal`.
 *
 * .col-set-equal([column span width]):
 * Extended mixin to set up equal width columns and properly clear them at the same time
 *
 * Note: Every use of .col-set-equal() must be wrapped in a media query (even for smallest "mobile first" viewport).
 *       Because else the `nth-child` selectors used in ` .col-set-equal()` for proper clearing would be passed on to all
 *       other viewports/media queries in the layout.
 *
 * .col-clear([columns per line]):
 * Use this to manually clear every nth column if columns differ in height.
 * This ensures that a grid layout can have only [columns per line] columns on one horizontal grid line.
 *
 **/

// mixins //

.col-clear(@columns) {
	> .col:nth-child(@{columns}n+1) {
		clear: left;
	}
}

.col-set(@col-name, @col-span) {
	> .@{col-name} {
		.col-span(@col-span);
	}
}

.col-set-equal(@col-span) {
	@clear: @grid-max-cols / @col-span;
	
	// use default col-set mixin to generate selector
	.col-set(col, @col-span);
	
	// with equal columns, clear every nth element for proper alignment
	.col-clear(@clear);
}

// layouts //

.layout-responsive-1 {
	/**
	* specs: max cols 12
	* desktop: 4
	* tablet: 6
	* phone: 12
	**/

	@media  @m-small {
		.col-set-equal(12);
	}

	@media @m-medium {
		.col-set-equal(6);
	}

	@media @m-large {
		.col-set-equal(4);
	}
}

.layout-responsive-2 {
	/**
	* specs: max cols 12
	* desktop: 6
	* tablet: 12
	* phone: 12
	**/

	@media @m-medium-and-down {
		.col-set-equal(12);
	}

	@media @m-large {
		.col-set-equal(6);
	}
}

.layout-responsive-3 {
	/**
	* specs:
	* desktop: 8/4
	* tablet: 8/4
	* phone: 12
	**/

	@media @m-small {
		.col-set-equal(12);
	}

	@media @m-medium-and-up {
		.col-set(col-1, 8);
		.col-set(col-2, 4);
	}
}

.layout-responsive-4 {
	/**
	* specs:
	* desktop: 3
	* tablet: 6
	* phone: 12
	**/

	@media @m-small {
		.col-set-equal(12);
	}

	@media @m-medium {
		.col-set-equal(6);
	}

	@media @m-large {
		.col-set-equal(3);
	}
}

.layout-nogrid-1 {
	/**
	* specs:
	* desktop: 7
	* tablet: 5
	* phone: 5
	**/

	@media @m-medium-and-down {
		.col-set(col, @grid-max-cols / 5);
	}

	@media @m-large {
		.col-set(col, @grid-max-cols / 7);
	}
}